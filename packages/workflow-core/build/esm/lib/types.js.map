{"version":3,"file":"types.js","sources":["../../../src/lib/types.ts"],"sourcesContent":["import type { MachineConfig, MachineOptions } from 'xstate';\n\nexport interface Workflow {\n  subscribe: (callback: (event: WorkflowEvent) => void) => void;\n  sendEvent: (event: Omit<WorkflowEvent, 'state'>) => void;\n  getSnapshot: () => Record<PropertyKey, any>;\n}\n\nexport interface WorkflowContext {\n  id: string;\n  state: any;\n  localContextData: any;\n  sessionData: any;\n  lockKey: string;\n}\n\nexport interface WorkflowPlugin {\n  when: 'pre' | 'post';\n  action: (options: { context: any; event: any; currentState: any }) => Promise<void>;\n}\n\nexport interface StatePlugin extends Omit<WorkflowPlugin, 'when'> {\n  /**\n   * The actions key to inject an action function into.\n   * E.g. { actions: { [plugin.name]: plugin.action  } }\n   */\n  name: string;\n  /**\n   * entry - fire an action when transitioning into a specified state\n   * exit  - fire an action when transitioning out of a specified state\n   */\n  when: 'entry' | 'exit';\n  /**\n   * States already defined in the statechart\n   */\n  stateNames: Array<string>;\n}\n\nexport interface GlobalPlugin extends WorkflowPlugin {\n  stateName: string;\n}\n\nexport interface WorkflowEvent {\n  type: string;\n  state: string;\n  payload?: Record<PropertyKey, any>;\n  error?: unknown;\n}\n\nexport interface WorkflowExtensions {\n  statePlugins: StatePlugins;\n  globalPlugins: GlobalPlugins;\n}\n\nexport interface WorkflowOptions {\n  workflowDefinitionType: 'statechart-json' | 'bpmn-json';\n  workflowDefinition: MachineConfig<any, any, any>;\n  workflowActions?: MachineOptions<any, any>['actions'];\n  context?: WorkflowContext;\n  extensions?: WorkflowExtensions;\n}\n\nexport interface WorkflowRunnerArgs {\n  workflowDefinition: MachineConfig<any, any, any>;\n  workflowActions?: MachineOptions<any, any>['actions'];\n  context: any;\n  state?: string;\n  extensions?: WorkflowExtensions;\n}\n\nexport type WorkflowEventWithoutState = Omit<WorkflowEvent, 'state'>;\n\nexport type StatePlugins = StatePlugin[];\n\nexport type GlobalPlugins = GlobalPlugin[];\n\nexport type TCreateWorkflow = (options: WorkflowOptions) => Workflow;\n\nexport const Error = {\n  ERROR: 'ERROR',\n  HTTP_ERROR: 'HTTP_ERROR',\n} as const;\n\nexport const Errors = [Error.ERROR, Error.HTTP_ERROR] as const;\n"],"names":["Error","ERROR","HTTP_ERROR","Errors"],"mappings":";;;;;;;;;;AA8EO,IAAMA,KAAK,GAAG;AACnBC,EAAAA,KAAK,EAAE,OAAO;AACdC,EAAAA,UAAU,EAAE,YAAA;AACd,EAAU;AAEH,IAAMC,MAAM,GAAG,CAACH,KAAK,CAACC,KAAK,EAAED,KAAK,CAACE,UAAU;;;;"}